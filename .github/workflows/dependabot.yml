name: dependabot

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  dependabot-auto-pr:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js for commitlint
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: curl -sSL https://install.python-poetry.org | python3 -

    - name: Install dependencies
      run: poetry install

    - name: Fetch metadata
      id: metadata
      uses: dependabot/fetch-metadata@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Dependabot PR
      if: github.event_name == 'schedule' || (github.event_name == 'pull_request' && contains(github.head_ref, 'dependabot'))
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        # Extract the dependency name and version from the metadata
        DEP_NAME=$(jq -r '.dependencyNames[0]' < "$GITHUB_EVENT_PATH")
        NEW_VERSION=$(jq -r '.version' < "$GITHUB_EVENT_PATH")
        
        # Create a new branch
        git checkout -b dependabot-auto-update-$DEP_NAME-$NEW_VERSION
        
        # Update the dependency
        poetry update $DEP_NAME
        
        # Commit the changes
        git commit -am "chore(deps): update $DEP_NAME to $NEW_VERSION"
        
        # Push the branch
        git push origin dependabot-auto-update-$DEP_NAME-$NEW_VERSION
        
        # Create a pull request
        gh pr create --title "chore(deps): update $DEP_NAME to $NEW_VERSION" --body "This PR updates $DEP_NAME to $NEW_VERSION." --label dependencies

    - name: Close stale Dependabot PRs
      if: github.event_name == 'schedule'
      uses: actions/github-script@v3
      with:
        script: |
          const stalePRs = await github.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            head: 'dependabot'
          });
          for (const pr of stalePRs.data) {
            if (new Date(pr.updated_at) < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) {
              await github.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed'
              });
            }
          }
